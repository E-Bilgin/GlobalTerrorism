# -*- coding: utf-8 -*-
"""rf_ridge_lasso.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p0lU68Fl1p5v3G42SPuL7OH7QnVMgcv5
"""

#importing libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

attack = pd.read_csv('globalterrorismdb.csv',encoding='ISO-8859-1', low_memory=False)
attack.rename(columns={'iyear':'Year','imonth':'Month','iday':'Day','country_txt':'Country','region_txt':'Region','attacktype1_txt':'AttackType','target1':'Target','nkill':'Killed','nwound':'Wounded','summary':'Summary','gname':'Group','targtype1_txt':'Target_type','weaptype1_txt':'Weapon_type','motive':'Motive'},inplace=True)
attack = attack[['Year','Month','Day','Country','Region','city','latitude','longitude','AttackType','Killed','Wounded','Target','Summary','Group','Target_type','Weapon_type','Motive']]
attack['casualities'] = attack['Killed'] + attack['Wounded']

# Selecting top 15 countries
attack_most_freq = attack[(attack.Country == 'Iraq') | (attack.Country == 'Pakistan') | (attack.Country == 'Afghanistan') | (attack.Country == 'India') | (attack.Country == 'Colombia') | (attack.Country == 'Philippines') | (attack.Country == 'Peru') | (attack.Country == 'El Salvador') | (attack.Country == 'United Kingdom') | (attack.Country == 'Turkey') | (attack.Country == 'Somalia') | (attack.Country == 'Nigeria') | (attack.Country == 'Thailand') | (attack.Country == 'Yemen') | (attack.Country == 'Spain')]
attack_most_freq = attack_most_freq.drop(["Summary","Motive"],axis = 1)
#attack_most_freq.mean()
attack_most_freq = attack_most_freq.fillna(attack_most_freq.mean())
#attack_most_freq = attack_most_freq.dropna()
attack_most_freq.isnull().sum()

attack_most_freq = attack_most_freq.dropna()
attack_most_freq.isnull().sum()
#attack_most_freq.shape

attack_most_freq

attack_most_freq_country = pd.get_dummies(attack_most_freq['Country'])
df_new_1 = pd.concat([attack_most_freq, attack_most_freq_country], axis=1)
# Create a set of dummy variables from the attack_type variable
attack_most_freq_attackType = pd.get_dummies(attack_most_freq['AttackType'])
#df_new_2 = pd.concat([attack_most_freq_country, attack_most_freq_attackType], axis=1)
df_new_2 = df_new_1.join(attack_most_freq_attackType)
attack_most_freq_Region = pd.get_dummies(attack_most_freq['Region'])
df_new_3 = df_new_2.join(attack_most_freq_Region)
df_new_3 = df_new_3.drop(["city","Target","Group"],axis = 1)
df_new_4 = df_new_3.drop(["Target_type","Weapon_type"],axis = 1)
df_new_4.shape

df_new_4

y = df_new_4['casualities']
df_new_5 = df_new_4.drop('casualities',axis=1)
#X = df_new_5

df_new_6 = df_new_5.drop(["Country","AttackType","Region"],axis = 1)
X = df_new_6

# Feature Scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X = X.astype('float64')
X = sc.fit_transform(X)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)

from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

mse_rf = {}

for n in range(45, 51):
    rfr = RandomForestRegressor(n_estimators=n)
    rfr.fit(X_train, y_train)
    y_pred = rfr.predict(X_test)
    mse_rf[n] = mean_squared_error(y_test, y_pred)

mse_rf

col={'Mean Square Error': mse_rf}
df = pd.DataFrame(data=col, index=mse_rf)
df.plot(kind='bar')
plt.xlabel('n_estimator')
plt.ylabel('Mean Square Error')
plt.title('Random Forest')

from sklearn.linear_model import Ridge
from sklearn.metrics import mean_squared_error

mse_ridge = {}

for n in [1e-2, 1, 2, 3]:
    ridge = Ridge(alpha=n)
    ridge.fit(X_train, y_train)
    y_pred = ridge.predict(X_test)
    mse_ridge[n] = mean_squared_error(y_test, y_pred)

mse_ridge

from sklearn.linear_model import Lasso
from sklearn.metrics import mean_squared_error

mse_lasso = {}

for n in [1e-2, 1, 2, 3]:
    lasso = Lasso(alpha=n)
    lasso.fit(X_train, y_train)
    y_pred = lasso.predict(X_test)
    mse_lasso[n] = mean_squared_error(y_test, y_pred)

mse_lasso

index = np.arange(4)
bar_width = 0.35

fig, ax = plt.subplots()
ridge = ax.bar(index, mse_ridge.values(), bar_width, label="Ridge")
lasso = ax.bar(index+bar_width, mse_lasso.values(), bar_width, label="Lasso")

ax.set_xlabel('Lambda')
ax.set_ylabel('Mean Square Error')
ax.set_title('Comparison of Ridge and Lasso')
ax.set_xticks(index + bar_width / 2)
ax.set_xticklabels(["1e-2", "1", "2", "3"])
ax.legend()

plt.figure(figsize=(15,15))
plt.show()

